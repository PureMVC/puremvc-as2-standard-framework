/*PureMVC AS2 Port by Pedr Browne <pedr.browne@puremvc.org>PureMVC - Copyright(c) 2006-2008 Futurescale, Inc., Some rights reserved.Your reuse is governed by the Creative Commons Attribution 3.0 License */import org.puremvc.as2.interfaces.*;import org.puremvc.as2.patterns.observer.*;/** * A base <code>IMediator</code> implementation.  *  * @see org.puremvc.as2.core.view.View View */class org.puremvc.as2.patterns.mediator.Mediator extends Notifier implements IMediator, INotifier{    /**     * The name of the <code>Mediator</code>.      *      * <P>     * Typically, a <code>Mediator</code> will be written to serve     * one specific control or group controls and so,	 * will not have a need to be dynamically named.</P>	 */	public static var NAME : String = 'Mediator';		/**	 * Constructor.	 */	public function Mediator( mediatorName:String, viewComponent : Object) {				this.mediatorName = (mediatorName != undefined)?mediatorName:NAME; 		this.viewComponent = viewComponent || null;		}	/**	 * Get the name of the <code>Mediator</code>.	 * <P>	 * Override in subclass!</P>	 */			public function getMediatorName() : String 	{			return mediatorName;	}		/**		 * Set the <code>IMediator</code>'s view component.		 * 		 * @param Object the view component		 */	public function setViewComponent( viewComponent:Object ):Void 	{		this.viewComponent = viewComponent;	}			/**	 * Get the <code>Mediator</code>'s view component.	 * 	 * <P>	 * Additionally, an implicit getter will usually	 * be defined in the subclass that casts the view 	 * object to a type, like this:</P>	 * 	 * <listing>	 *		private function get comboBox : mx.controls.ComboBox 	 *		{	 *			return viewComponent as mx.controls.ComboBox;	 *		}	 * </listing>	 */			public function getViewComponent() : Object	{			return viewComponent;	}	/**	 * List the <code>INotification</code> names this	 * <code>Mediator</code> is interested in being notified of.	 * 	 * @return Array the list of <code>INotification</code> names 	 */	public function listNotificationInterests() : Array 	{		return [ ];	}	/**	 * Handle <code>INotification</code>s.	 * 	 * <P>	 * Typically this will be handled in a switch statement,	 * with one 'case' entry per <code>INotification</code>	 * the <code>Mediator</code> is interested in.	 */ 	public function handleNotification( notification:INotification ) : Void {}		/**	 * Called by the View when the Mediator is registered	 */ 	public function onRegister( ) : Void {}	/**	 * Called by the View when the Mediator is removed	 */ 	public function onRemove( ) : Void {}		// the mediator name	private var mediatorName:String;			// The view component	private var viewComponent : Object;	}